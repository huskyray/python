import tkinter
import random
import datetime
import time
from threading import Thread
from tkcalendar import DateEntry

root = tkinter.Tk()
root.configure(bg="white")
root.title("待辦事項")
root.geometry("280x550")

tasks = []
reminders = []

def update_listbox():
    clear_listbox()
    for task in tasks:
        lb_tasks.insert("end", task)

def clear_listbox():
    lb_tasks.delete(0, "end")

def add_task():
    task = txt_input.get()
    if task != "":
        tasks.append(task)
        update_listbox()
    else:
        lbl_display["text"] = "不能輸入空白"
    txt_input.delete(0, "end")

def del_all_tasks():
    global tasks
    tasks = []
    update_listbox()

def delete_one_task():
    task = lb_tasks.get("active")
    if task in tasks:
        tasks.remove(task)
    update_listbox()

def sort_asc():
    tasks.sort()
    update_listbox()

def sort_desc():
    tasks.sort()
    tasks.reverse()
    update_listbox()

def choose_random():
    task = random.choice(tasks)
    lbl_display["text"] = task

def set_reminder():
    task = lb_tasks.get("active")
    if task in tasks:
        reminder_time_str = f"{cal.get_date()} {hour_spinbox.get()}:{minute_spinbox.get()}:{second_spinbox.get()} {ampm_combobox.get()}"
        try:
            reminder_time = datetime.datetime.strptime(reminder_time_str, "%Y-%m-%d %I:%M:%S %p")
        except ValueError:
            lbl_display["text"] = "提醒時間格式不正確，請按照 YYYY-MM-DD hh:mm:ss AM/PM 格式輸入。"
            return
        current_time = datetime.datetime.now()
        if reminder_time <= current_time:
            lbl_display["text"] = "提醒時間必須晚於當前時間。"
            return
        reminders.append((reminder_time, task))
        print(f"提醒時間設定 '{task}' at {reminder_time.strftime('%Y-%m-%d %I:%M:%S %p')}")
        # 啟動新執行緒監視提醒
        thread = Thread(target=check_reminders)
        thread.start()

def check_reminders():
    while True:
        current_time = datetime.datetime.now()
        for reminder in reminders:
            reminder_time, task = reminder
            if current_time >= reminder_time:
                print(f"注意事項 '{task}'!")
                reminders.remove(reminder)
        time.sleep(1)

def exit():
    root.destroy()

lbl_display = tkinter.Label(root, text="", bg="white")
lbl_display.pack()

txt_input = tkinter.Entry(root, width=20)
txt_input.pack()

btn_add_task = tkinter.Button(root, text="增加待辦事項", fg="green", bg="white", command=add_task)
btn_add_task.pack()

btn_delete_one = tkinter.Button(root, text="刪除事項", fg="green", bg="white", command=delete_one_task)
btn_delete_one.pack()

lbl_reminder = tkinter.Label(root, text="提醒時間", bg="white")  # 12小時制
lbl_reminder.pack()

cal = DateEntry(root, width=12, background='darkblue', foreground='white', borderwidth=2, year=2024)
cal.pack(padx=10, pady=10)

time_frame = tkinter.Frame(root, bg="white")
time_frame.pack()

tkinter.Label(time_frame, text="時間:", bg="white").pack(side="left")

hour_spinbox = tkinter.Spinbox(time_frame, from_=1, to=12, width=2)
hour_spinbox.pack(side="left")
hour_spinbox.delete(0, 'end')
hour_spinbox.insert(0, datetime.datetime.now().strftime("%I"))

tkinter.Label(time_frame, text=":", bg="white").pack(side="left")

minute_spinbox = tkinter.Spinbox(time_frame, from_=0, to=59, width=2)
minute_spinbox.pack(side="left")
minute_spinbox.delete(0, 'end')
minute_spinbox.insert(0, datetime.datetime.now().strftime("%M"))

tkinter.Label(time_frame, text=":", bg="white").pack(side="left")

second_spinbox = tkinter.Spinbox(time_frame, from_=0, to=59, width=2)
second_spinbox.pack(side="left")
second_spinbox.delete(0, 'end')
second_spinbox.insert(0, datetime.datetime.now().strftime("%S"))

ampm_combobox = tkinter.StringVar(root)
ampm_combobox.set(datetime.datetime.now().strftime("%p"))
ampm_optionmenu = tkinter.OptionMenu(time_frame, ampm_combobox, "AM", "PM")
ampm_optionmenu.pack(side="left")

btn_reminder = tkinter.Button(root, text="設定提醒", fg="green", bg="white", command=set_reminder)
btn_reminder.pack()

lb_tasks = tkinter.Listbox(root)
lb_tasks.pack()

btn_exit = tkinter.Button(root, text="關閉", fg="green", bg="white", command=exit)
btn_exit.pack()

root.mainloop()
