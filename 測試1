import tkinter
import random
import datetime
import time
from threading import Thread

root = tkinter.Tk()
root.configure(bg="white")
root.title("待辦事項")
root.geometry("280x550")

tasks = []
reminders = []

def update_listbox():
    clear_listbox()
    for task in tasks:
        lb_tasks.insert("end", task)

def clear_listbox():
    lb_tasks.delete(0, "end")

def add_task():
    task = txt_input.get()
    if task != "":
        tasks.append(task)
        update_listbox()
    else:
        lbl_display["text"] = "不能輸入空白"
    txt_input.delete(0, "end")

def del_all_tasks():
    global tasks
    tasks = []
    update_listbox()

def delete_one_task():
    task = lb_tasks.get("active")
    if task in tasks:
        tasks.remove(task)
    update_listbox()

def sort_asc():
    tasks.sort()
    update_listbox()

def sort_desc():
    tasks.sort()
    tasks.reverse()
    update_listbox()

def choose_random():
    task = random.choice(tasks)
    lbl_display["text"] = task

def set_reminder():
    task = lb_tasks.get("active")
    if task in tasks:
        reminder_time_str = f"{var_year.get()}-{var_month.get()}-{var_day.get()} {var_hour.get()}:{var_minute.get()}:{var_second.get()} {var_ampm.get()}"
        try:
            reminder_time = datetime.datetime.strptime(reminder_time_str, "%Y-%m-%d %I:%M:%S %p")
        except ValueError:
            lbl_display["text"] = "提醒時間格式不正確，請按照 YYYY-MM-DD hh:mm:ss AM/PM 格式輸入。"
            return
        current_time = datetime.datetime.now()
        if reminder_time <= current_time:
            lbl_display["text"] = "提醒時間必須晚於當前時間。"
            return
        reminders.append((reminder_time, task))
        print(f"Reminder set for task '{task}' at {reminder_time.strftime('%Y-%m-%d %I:%M:%S %p')}")
        # 啟動新執行緒監視提醒
        thread = Thread(target=check_reminders)
        thread.start()

def check_reminders():
    while True:
        current_time = datetime.datetime.now()
        for reminder in reminders:
            reminder_time, task = reminder
            if current_time >= reminder_time:
                print(f"Reminder for task '{task}'!")
                reminders.remove(reminder)
        time.sleep(1)

def exit():
    pass

lbl_title = tkinter.Label(root, text="ToDo List", bg="white")
lbl_title.pack()

lbl_display = tkinter.Label(root, text="", bg="white")
lbl_display.pack()

txt_input = tkinter.Entry(root, width=20)
txt_input.pack()

btn_add_task = tkinter.Button(root, text="增加待辦事項", fg="green", bg="white", command=add_task)
btn_add_task.pack()

btn_delete_one = tkinter.Button(root, text="Delete One task", fg="green", bg="white", command=delete_one_task)
btn_delete_one.pack()

lbl_reminder = tkinter.Label(root, text="提醒時間 (年-月-日 時:分:秒 AM/PM)12小時制", bg="white")  # 12小時制
lbl_reminder.pack()

# 提醒時間選擇
reminder_frame = tkinter.Frame(root, bg="white")
reminder_frame.pack()

year_label = tkinter.Label(reminder_frame, text="年:", bg="white")
year_label.pack(side="left")
var_year = tkinter.StringVar(root)
var_year.set(datetime.datetime.now().year)
year_optionmenu = tkinter.OptionMenu(reminder_frame, var_year, *[str(year) for year in range(datetime.datetime.now().year, datetime.datetime.now().year + 10)])
year_optionmenu.pack(side="left")

month_label = tkinter.Label(reminder_frame, text="月:", bg="white")
month_label.pack(side="left")
var_month = tkinter.StringVar(root)
var_month.set(datetime.datetime.now().month)
month_optionmenu = tkinter.OptionMenu(reminder_frame, var_month, *[str(month) for month in range(1, 13)])
month_optionmenu.pack(side="left")

day_label = tkinter.Label(reminder_frame, text="日:", bg="white")
day_label.pack(side="left")
var_day = tkinter.StringVar(root)
var_day.set(datetime.datetime.now().day)
day_optionmenu = tkinter.OptionMenu(reminder_frame, var_day, *[str(day) for day in range(1, 32)])
day_optionmenu.pack(side="left")

hour_label = tkinter.Label(reminder_frame, text="時:", bg="white")
hour_label.pack(side="left")
var_hour = tkinter.StringVar(root)
var_hour.set(datetime.datetime.now().strftime("%I"))
hour_optionmenu = tkinter.OptionMenu(reminder_frame, var_hour, *["{:02d}".format(hour) for hour in range(1, 13)])
hour_optionmenu.pack(side="left")

minute_label = tkinter.Label(reminder_frame, text="分:", bg="white")
minute_label.pack(side="left")
var_minute = tkinter.StringVar(root)
var_minute.set(datetime.datetime.now().strftime("%M"))
minute_optionmenu = tkinter.OptionMenu(reminder_frame, var_minute, *["{:02d}".format(minute) for minute in range(0, 60)])
minute_optionmenu.pack(side="left")

second_label = tkinter.Label(reminder_frame, text="秒:", bg="white")
second_label.pack(side="left")
var_second = tkinter.StringVar(root)
var_second.set(datetime.datetime.now().strftime("%S"))
second_optionmenu = tkinter.OptionMenu(reminder_frame, var_second, *["{:02d}".format(second) for second in range(0, 60)])
second_optionmenu.pack(side="left")

ampm_label = tkinter.Label(reminder_frame, text="AM/PM:", bg="white")
ampm_label.pack(side="left")
var_ampm = tkinter.StringVar(root)
var_ampm.set(datetime.datetime.now().strftime("%p"))
ampm_optionmenu = tkinter.OptionMenu(reminder_frame, var_ampm, "AM", "PM")
ampm_optionmenu.pack(side="left")

btn_reminder = tkinter.Button(root, text="Set Reminder", fg="green", bg="white", command=set_reminder)
btn_reminder.pack()

lb_tasks = tkinter.Listbox(root)
lb_tasks.pack()

btn_exit = tkinter.Button(root, text="Exit", fg="green", bg="white", command=exit)
btn_exit.pack()

root.mainloop()
